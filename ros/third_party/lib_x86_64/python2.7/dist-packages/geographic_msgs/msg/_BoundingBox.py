# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from geographic_msgs/BoundingBox.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geographic_msgs.msg

class BoundingBox(genpy.Message):
  _md5sum = "f62e8b5e390a3ac7603250d46e8f8446"
  _type = "geographic_msgs/BoundingBox"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Geographic map bounding box. 
#
# The two GeoPoints denote diagonally opposite corners of the box.
#
# If min_pt.latitude is NaN, the bounding box is "global", matching
# any valid latitude, longitude and altitude.
#
# If min_pt.altitude is NaN, the bounding box is two-dimensional and
# matches any altitude within the specified latitude and longitude
# range.

GeoPoint min_pt         # lowest and most Southwestern corner
GeoPoint max_pt         # highest and most Northeastern corner

================================================================================
MSG: geographic_msgs/GeoPoint
# Geographic point, using the WGS 84 reference ellipsoid.

# Latitude [degrees]. Positive is north of equator; negative is south
# (-90 <= latitude <= +90).
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or
# +90, and longitude is irrelevant, but must be in range.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
float64 altitude

"""
  __slots__ = ['min_pt','max_pt']
  _slot_types = ['geographic_msgs/GeoPoint','geographic_msgs/GeoPoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       min_pt,max_pt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoundingBox, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min_pt is None:
        self.min_pt = geographic_msgs.msg.GeoPoint()
      if self.max_pt is None:
        self.max_pt = geographic_msgs.msg.GeoPoint()
    else:
      self.min_pt = geographic_msgs.msg.GeoPoint()
      self.max_pt = geographic_msgs.msg.GeoPoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.min_pt.latitude, _x.min_pt.longitude, _x.min_pt.altitude, _x.max_pt.latitude, _x.max_pt.longitude, _x.max_pt.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.min_pt is None:
        self.min_pt = geographic_msgs.msg.GeoPoint()
      if self.max_pt is None:
        self.max_pt = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.min_pt.latitude, _x.min_pt.longitude, _x.min_pt.altitude, _x.max_pt.latitude, _x.max_pt.longitude, _x.max_pt.altitude,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.min_pt.latitude, _x.min_pt.longitude, _x.min_pt.altitude, _x.max_pt.latitude, _x.max_pt.longitude, _x.max_pt.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.min_pt is None:
        self.min_pt = geographic_msgs.msg.GeoPoint()
      if self.max_pt is None:
        self.max_pt = geographic_msgs.msg.GeoPoint()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.min_pt.latitude, _x.min_pt.longitude, _x.min_pt.altitude, _x.max_pt.latitude, _x.max_pt.longitude, _x.max_pt.altitude,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
